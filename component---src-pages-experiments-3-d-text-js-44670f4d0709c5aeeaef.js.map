{"version":3,"sources":["webpack:///./src/components/scenes/3DTextScene.js","webpack:///./src/pages/experiments/3d-text.js"],"names":["fontUrl","getPrefixedPath","camera","position","intensity","width","height","fallback","center","text","color","size","rotation","rotationFactor","TextObject","ref","useRef","useFrame","current","y","font","useLoader","THREE","config","useMemo","curveSegments","bevelEnabled","bevelThickness","bevelSize","bevelOffset","bevelSegments","mesh","useUpdate","self","geometry","computeBoundingBox","boundingBox","getSize","x","z","attach","args","children","title"],"mappings":"2KAIMA,EAAUC,YAAgB,oBAEjB,aACb,OACE,kBAAC,IAAD,CAAQC,OAAQ,CAAEC,SAAU,CAAC,EAAG,EAAG,OACjC,mCACEC,UAAW,EACXC,MAAO,IACPC,OAAQ,IACRH,SAAU,CAAC,EAAG,IAAK,OAErB,kBAAC,WAAD,CACEI,SACE,kBAAC,IAAD,CAAKC,QAAM,GACT,0CAIJ,kBAAC,EAAD,CACEC,KAAM,KACNC,MAAO,IACPC,KAAM,GACNL,OAAQ,GACRH,SAAU,CAAC,EAAG,GAAI,GAClBS,SAAU,CAAC,EAAG,GAAK,IACnBC,eAAgB,MAElB,kBAAC,EAAD,CACEJ,KAAM,OACNC,MAAO,SACPC,KAAM,GACNL,OAAQ,GACRH,SAAU,CAAC,GAAI,GAAI,GACnBS,SAAU,EAAE,IAAM,IAAM,IACxBC,gBAAiB,SAOrBC,EAAa,SAAC,GAQb,IAPLX,EAOI,EAPJA,SACAS,EAMI,EANJA,SACAC,EAKI,EALJA,eACAJ,EAII,EAJJA,KACAE,EAGI,EAHJA,KACAL,EAEI,EAFJA,OACAI,EACI,EADJA,MAEMK,EAAMC,mBACZC,aAAS,WACmBF,EAAlBG,QACHN,SAASO,GAAKN,KAErB,IAAMO,EAAOC,YAAUC,aAAkBtB,GACnCuB,EAASC,mBACb,iBAAO,CACLJ,OACAT,OACAL,SACAmB,cAAe,GACfC,cAAc,EACdC,eAAgB,EAChBC,UAAW,EACXC,YAAa,EACbC,cAAe,KAEjB,CAACV,EAAMd,EAAQK,IAEXoB,EAAOC,aAAU,SAAAC,GACrB,IAAMtB,EAAO,IAAIW,UACjBW,EAAKC,SAASC,qBACdF,EAAKC,SAASE,YAAYC,QAAQ1B,GAClCsB,EAAK9B,SAASmC,GAAK3B,EAAK2B,EAAI,EAC5BL,EAAK9B,SAASgB,GAAKR,EAAKQ,EAAI,EAC5Bc,EAAK9B,SAASoC,GAAK5B,EAAK4B,EAAI,KAE9B,OACE,2BAAOxB,IAAKA,EAAKZ,SAAUA,EAAUS,SAAUA,GAC7C,0BAAMG,IAAKgB,GACT,kCAAcS,OAAO,WAAWC,KAAM,CAAChC,EAAMc,KAC7C,0CAAsBb,MAAOA,EAAO8B,OAAO,gBClFpC,sBAAiC,EAA9BE,SAA8B,EAApBrC,MAAoB,EAAbC,OACjC,OACE,kBAAC,IAAD,CAAYD,MAAO,IAAKC,OAAQ,IAAKqC,MAAM,WACzC,kBAAC,EAAD","file":"component---src-pages-experiments-3-d-text-js-44670f4d0709c5aeeaef.js","sourcesContent":["import React, { useRef, useMemo, Suspense } from \"react\"\nimport * as THREE from \"three\"\nimport { Canvas, useLoader, useUpdate, useFrame, Dom } from \"react-three-fiber\"\nimport getPrefixedPath from \"../../getPrefixedPath\"\nconst fontUrl = getPrefixedPath(\"/fonts/bold.blob\")\n\nexport default () => {\n  return (\n    <Canvas camera={{ position: [0, 0, 160] }}>\n      <rectAreaLight\n        intensity={4}\n        width={300}\n        height={300}\n        position={[0, 100, 250]}\n      />\n      <Suspense\n        fallback={\n          <Dom center>\n            <div>loading</div>\n          </Dom>\n        }\n      >\n        <TextObject\n          text={\"3D\"}\n          color={0x0000ff}\n          size={60}\n          height={10}\n          position={[0, 40, 0]}\n          rotation={[0, 0.4, 0.5]}\n          rotationFactor={0.04}\n        ></TextObject>\n        <TextObject\n          text={\"TEXT\"}\n          color={0xff0000}\n          size={40}\n          height={10}\n          position={[0, -40, 0]}\n          rotation={[-0.1, -0.4, -0.1]}\n          rotationFactor={-0.02}\n        />\n      </Suspense>\n    </Canvas>\n  )\n}\n\nconst TextObject = ({\n  position,\n  rotation,\n  rotationFactor,\n  text,\n  size,\n  height,\n  color,\n}) => {\n  const ref = useRef()\n  useFrame(() => {\n    const { current: mesh } = ref\n    mesh.rotation.y += rotationFactor\n  })\n  const font = useLoader(THREE.FontLoader, fontUrl)\n  const config = useMemo(\n    () => ({\n      font,\n      size,\n      height,\n      curveSegments: 32,\n      bevelEnabled: true,\n      bevelThickness: 3,\n      bevelSize: 1,\n      bevelOffset: 0,\n      bevelSegments: 8,\n    }),\n    [font, height, size]\n  )\n  const mesh = useUpdate(self => {\n    const size = new THREE.Vector3()\n    self.geometry.computeBoundingBox()\n    self.geometry.boundingBox.getSize(size)\n    self.position.x = -size.x / 2\n    self.position.y = -size.y / 2\n    self.position.z = -size.z / 2\n  })\n  return (\n    <group ref={ref} position={position} rotation={rotation}>\n      <mesh ref={mesh}>\n        <textGeometry attach=\"geometry\" args={[text, config]} />\n        <meshStandardMaterial color={color} attach=\"material\" />\n      </mesh>\n    </group>\n  )\n}\n","import React from \"react\"\nimport Experiment from \"../../components/experiment\"\nimport Scene from \"../../components/scenes/3DTextScene\"\n\nexport default ({ children, width, height }) => {\n  return (\n    <Experiment width={200} height={200} title=\"3D Text\">\n      <Scene />\n    </Experiment>\n  )\n}\n"],"sourceRoot":""}